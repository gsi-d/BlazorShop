@page "/CarrinhoCompra"

@if (CarrinhoCompraItens == null && MensagemErro == null)
{
    <Spinner />
}
else if (MensagemErro != null)
{
    <Erro MensagemErro="@MensagemErro"></Erro>
}
else
{
    <h3 class="mb-5">Carrinho</h3>
    @if (CarrinhoCompraItens.Count() > 0)
    {
        <div class="row mb-5">
            <div class="col-md-9">
                @foreach (var item in CarrinhoCompraItens)
                {
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <img src="@item.ProdutoImagemUrl" width="250" class="img-thumbnail">
                        </div>
                        <div class="col-md-9">
                            <h5>@item.ProdutoNome</h5>
                            <div class="mb-4">
                                @item.ProdutoDescricao
                            </div>
                            <span>
                                Preço: <b>@item.Preco.ToString("C")</b>
                                <input @oninput="() => AtualizaQuantidadeInput(item.Id)" type="number" @bind="@item.Quantidade">
                                <button data-itemId="@item.Id" class="btn btn-info btn-sm atualizaQuantidade" @onclick="() => AtualizaQuantidadeCarrinhoItem(item.Id, item.Quantidade)">
                                    <span class="oi oi-check"></span>
                                </button>
                                <button @onclick="(() => DeletaCarrinhoItem(item.Id))" class="btn btn-danger sm">
                                    <span class="oi oi-trash"></span>
                                </button>
                            </span>
                        </div>
                    </div>
                }
            </div>
            <div class="col-md-3">
                <h5>Carrinho - Resumo</h5>
                <div class="mt-2">
                    <div>Total - (@QuantidadeTotal items)&nbsp;<br /><b>@PrecoTotal</b></div>
                    <a href="#" class="btn btn-success">
                        <span class="oi oi-credit-card"></span>&nbsp; Fechar Pedido
                    </a>
                </div>
            </div>
        </div>
    }
    else
    {
        <div>
            <h3><b>Seu carrinho esta vazio</b></h3>
        </div>
    }
}

@code {
    [Inject]
    public ICarrinhoCompraService? CarrinhoCompraService { get; set; }
    public List<CarrinhoItemDTO>? CarrinhoCompraItens { get; set; }
    public string? MensagemErro { get; set; }
    protected string? PrecoTotal { get; set; }
    protected int QuantidadeTotal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CarrinhoCompraItens = await CarrinhoCompraService.GetItens(UsuarioLogado.UsuarioId);
            CarrinhoChanged();
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }

    protected async Task DeletaCarrinhoItem(int id)
    {
        var carrinhoItemDTO = await CarrinhoCompraService.DeletaItem(id);
        await RemoveCarrinhoItem(id);
        CarrinhoChanged();
    }

    private CarrinhoItemDTO GetCarrinhoItem(int id)
    {
        return CarrinhoCompraItens.FirstOrDefault(x => x.Id == id);
    }

    private async Task RemoveCarrinhoItem(int id)
    {
        var carrinhoItemDTO = GetCarrinhoItem(id);
        CarrinhoCompraItens.Remove(carrinhoItemDTO);
    }

    protected async Task AtualizaQuantidadeCarrinhoItem(int id, int quantidade)
    {
        try
        {
            if (quantidade > 0)
            {
                var atualizaItemDTO = new CarrinhoItemAtualizaQuantidadeDTO
                    {
                        CarrinhoItemId = id,
                        Quantidade = quantidade
                    };
                var itemAtualizado = await CarrinhoCompraService.AtualizaQuantidade(atualizaItemDTO);

                AtualizaPrecoItem(itemAtualizado);
                CarrinhoChanged();
                await _js.InvokeVoidAsync("TornaBotaoAtualizarQuantidadeVisivel", id, true);
            }
            else
            {
                var item = CarrinhoCompraItens.FirstOrDefault(x => x.Id == id);
                if (item is not null)
                {
                    item.Quantidade = 1;
                    item.PrecoTotal = item.Preco;
                }
            }
        }
        catch (Exception ex)
        {
            throw;
        }
    }
    private void SetPrecoTotal()
    {
        PrecoTotal = CarrinhoCompraItens.Sum(x => x.PrecoTotal).ToString("C");
    }

    private void SetQuantidadeTotal()
    {
        QuantidadeTotal = CarrinhoCompraItens.Sum(x => x.Quantidade);
    }

    private void CalculaResumoCarrinhoTotal()
    {
        SetPrecoTotal();
        SetQuantidadeTotal();
    }

    private void AtualizaPrecoItem(CarrinhoItemDTO carrinhoItemDTO)
    {
        var item = GetCarrinhoItem(carrinhoItemDTO.Id);

        if (item != null)
            item.PrecoTotal = carrinhoItemDTO.Preco * carrinhoItemDTO.Quantidade;
    }

    protected async Task AtualizaQuantidadeInput(int id)
    {
        await _js.InvokeVoidAsync("TornaBotaoAtualizarQuantidadeVisivel", id, true);
    }

    private void CarrinhoChanged()
    {
        CalculaResumoCarrinhoTotal();
        CarrinhoCompraService.RaiseEventOnCarrinhoCompraChanged(QuantidadeTotal);
    }
}
